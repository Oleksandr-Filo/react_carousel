{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","transform","this","props","images","itemSize","frameSize","step","animationDuration","itemsGap","scrollGap","carouselWidth","currentPosition","slice","indexOf","scrollValue","lastRightPosition","length","className","style","width","transition","gap","map","image","imageId","lastIndexOf","src","alt","height","type","onClick","setState","disabled","Component","App","itemWidth","handleChangeItemWidth","event","currentTarget","value","handleChangeFrameSize","handleChangeStepValue","handleChangeAnimDuration","action","htmlFor","id","name","min","defaultValue","onChange","max","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4bad9f0f.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  itemSize: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n};\n\ntype State = {\n  transform: string,\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    transform: 'translateX(0px)',\n  };\n\n  render() {\n    const {\n      images,\n      itemSize,\n      frameSize,\n      step,\n      animationDuration,\n    } = this.props;\n\n    const { transform } = this.state;\n\n    const gapMultiplier = 0.1;\n    const itemsGap = itemSize * gapMultiplier;\n    const totalVisibleGap = (frameSize - 1) * itemsGap;\n    const scrollGap = step * itemsGap;\n\n    const carouselWidth = itemSize * frameSize + totalVisibleGap;\n    const currentPosition = +transform.slice(transform.indexOf('(') + 1, -3);\n    const scrollValue = step * itemSize + scrollGap;\n\n    const lastRightPosition = (\n      itemSize * (images.length - frameSize) * (-1 - gapMultiplier)\n    );\n    const lastLeftPosition = 0;\n\n    return (\n      <>\n        <div\n          className=\"Carousel\"\n          style={{ width: `${carouselWidth}px` }}\n        >\n          <ul\n            className=\"Carousel__wrapper\"\n            style={{\n              transform: `${transform}`,\n              transition: `transform ${animationDuration}ms`,\n              gap: `${itemsGap}px`,\n            }}\n          >\n            {images.map(image => {\n              const imageId = image.slice(\n                image.lastIndexOf('/') + 1, image.lastIndexOf('.'),\n              );\n\n              return (\n                <li key={imageId}>\n                  <img\n                    className=\"Carousel__image\"\n                    src={image}\n                    alt={imageId}\n                    height={itemSize}\n                    width={itemSize}\n                  />\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n\n        <div className=\"Carousel__buttons-container\">\n          <button\n            className=\"Carousel__button Carousel__button--prev\"\n            type=\"button\"\n            onClick={() => (\n              this.setState(\n                (currentPosition + scrollValue) > lastLeftPosition\n                  ? { transform: `translateX(${lastLeftPosition}px)` }\n                  : { transform: `translateX(${currentPosition + scrollValue}px)` },\n              )\n            )}\n            disabled={transform === `translateX(${lastLeftPosition}px)` || false}\n          >\n            Prev\n          </button>\n\n          <button\n            className=\"Carousel__button Carousel__button--next\"\n            type=\"button\"\n            data-cy=\"next\"\n            onClick={() => (\n              this.setState(\n                (currentPosition - scrollValue) < lastRightPosition\n                  ? { transform: `translateX(${lastRightPosition}px)` }\n                  : { transform: `translateX(${currentPosition - scrollValue}px)` },\n              )\n            )}\n            disabled={transform === `translateX(${lastRightPosition}px)` || false}\n          >\n            Next\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './Reset.scss';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n  };\n\n  handleChangeItemWidth = (event: React.ChangeEvent<HTMLInputElement>) => (\n    this.setState({\n      itemWidth: +event.currentTarget.value,\n    })\n  );\n\n  handleChangeFrameSize = (event: React.ChangeEvent<HTMLInputElement>) => (\n    this.setState({\n      frameSize: +event.currentTarget.value,\n    })\n  );\n\n  handleChangeStepValue = (event: React.ChangeEvent<HTMLInputElement>) => (\n    this.setState({\n      step: +event.currentTarget.value,\n    })\n  );\n\n  handleChangeAnimDuration = (event: React.ChangeEvent<HTMLInputElement>) => (\n    this.setState({\n      animationDuration: +event.currentTarget.value,\n    })\n  );\n\n  render() {\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      step,\n      animationDuration,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <form action=\"#\" className=\"App__parameters\">\n          <label htmlFor=\"itemId\">\n            {'ItemWidth: '}\n            <input\n              id=\"itemId\"\n              type=\"number\"\n              name=\"itemWidth\"\n              className=\"App__input\"\n              min=\"1\"\n              defaultValue={itemWidth}\n              onChange={this.handleChangeItemWidth}\n            />\n          </label>\n\n          <label htmlFor=\"frameId\">\n            {'FrameSize: '}\n            <input\n              id=\"frameId\"\n              type=\"number\"\n              name=\"frameSize\"\n              className=\"App__input\"\n              min=\"1\"\n              max=\"10\"\n              defaultValue={frameSize}\n              onChange={this.handleChangeFrameSize}\n            />\n          </label>\n\n          <label htmlFor=\"stepId\">\n            {'Step: '}\n            <input\n              id=\"stepId\"\n              type=\"number\"\n              name=\"step\"\n              className=\"App__input\"\n              min=\"1\"\n              max=\"10\"\n              defaultValue={step}\n              onChange={this.handleChangeStepValue}\n            />\n          </label>\n\n          <label>\n            {'AnimationDuration: '}\n            <input\n              type=\"number\"\n              name=\"animationDuration\"\n              className=\"App__input\"\n              min=\"1\"\n              max=\"10000\"\n              defaultValue={animationDuration}\n              onChange={this.handleChangeAnimDuration}\n            />\n          </label>\n        </form>\n\n        <Carousel\n          images={images}\n          itemSize={itemWidth}\n          frameSize={frameSize}\n          step={step}\n          animationDuration={animationDuration}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}